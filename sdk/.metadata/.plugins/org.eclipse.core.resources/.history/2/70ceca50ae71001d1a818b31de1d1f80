/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "Uart.h"
#include "xil_io.h"
#include "xil_printf.h"
#include "xscugic.h"

void setupGIC(XScuGic* InstancePtr, void* intDevicePtr);


void setupGIC(XScuGic* InstancePtr, void* intDevicePtr){
	RINT32 Status = 0;

//    //setup interrupt system
//	XScuGic_Config *IntcConfig; /* Config for interrupt controller */
//
//	/* Initialize the interrupt controller driver */
//	IntcConfig = XScuGic_LookupConfig(0);
//
//	Status = XScuGic_CfgInitialize(InstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
//
//	/*
//	 * Initialize the exception table.
//	 */
//	Xil_ExceptionInit();
//
//	/*
//	 * Connect the interrupt controller interrupt handler to the
//	 * hardware interrupt handling logic in the processor.
//	 */
//	Xil_ExceptionRegisterHandler(5U,
//				(Xil_ExceptionHandler) XScuGic_InterruptHandler,
//				InstancePtr);
//
//	/*
//	 * Connect a device driver handler that will be called when an
//	 * interrupt for the device occurs, the device driver handler
//	 * performs the specific interrupt processing for the device
//	 */
//	Status = XScuGic_Connect(InstancePtr, 82,
//				  (Xil_ExceptionHandler) xUartPsInterruptHandler,
//				  intDevicePtr);
//
//
//	/* Enable the interrupt for the device */
//	XScuGic_Enable(InstancePtr, 82);
//
//
//	/* Enable interrupts */
//	 Xil_ExceptionEnable();

	/*My GIC driver trial*/

		/*
		 * Connect a device driver handler that will be called when an
		 * interrupt for the device occurs, the device driver handler
		 * performs the specific interrupt processing for the device
		 */
		Status = XScuGic_Connect(InstancePtr, 82,
					  (Xil_ExceptionHandler) xUartPsInterruptHandler,
					  intDevicePtr);

}

extern RUINT8 a1UartRxArray;
extern RUINT32 u4ReceivedDataSize;

int main()
{
	int Status;

    init_platform();

    print("Hello World\n\r");

    uartCfgType cfgInstance0;
    uartCfgType cfgInstance1;
    XScuGic InterruptController;	/* Instance of the Interrupt Controller */

    cfgInstance0.DeviceNum = UART_INSTANCE_DEVICE_1;
    cfgInstance1.DeviceNum = UART_INSTANCE_DEVICE_0;

    initializeUartCfg (&cfgInstance0);
    InitializeUart(&cfgInstance0);

    setupGIC(&InterruptController, &cfgInstance0);

    RUINT8 trialArray[] = "hello from my driver \r\n";
    RUINT8 trialArray2[] = "this message is the received \r\n";

    //UartSendData(trialArray, &cfgInstance0, sizeof(trialArray));
    RUINT32 counter = 0;
    while(1){
    	sleep(1);
//    	UartReceiveDataPolling(trialArray2, &cfgInstance0, sizeof(trialArray2));
//    	UartSendData(trialArray2, &cfgInstance0, sizeof(trialArray2));
//    	counter++;
    	/*this is the received message through out 1 second window*/
    	//UartSendData(a1UartRxArray, &cfgInstance0, u4ReceivedDataSize);
    }

    cleanup_platform();

    return 0;
}


