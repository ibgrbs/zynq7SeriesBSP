/*
 * GIC.c
 *
 *  Created on: Nov 13, 2022
 *      Author: bugra's PC
 */


#include "GIC.h"

/***********definitions**************/
#define RegisterSize 4
//macro definitions
#define ICDFROffset(x) (ICDICFR_BASE_OFFSET + RegisterSize*x)
#define ICDIPROffset(x) (ICDIPR_BASE_OFFSET + RegisterSize*x)
#define ICDIPTROffset(x) (ICDIPTR_BASE_OFFSET + RegisterSize*x)
#define ICDISEROffset(x) (ICDISER_BASE_OFFSET + RegisterSize*x)
//register offsets
#define MPCORE_ADDRESS 0xF8F00000 		// Applciation processing unit base address
#define ICCICR_OFFSET 0x00000100 		// CPU interface control register
#define ICCPMR_OFFSET 0x00000104 		// Interrupt Priority Mask Register
#define ICCBPR_OFFSET 0x00000108 		// Binary Point Register
#define ICCIAR_OFFSET 0x0000010C 		// Interrupt Acknowledge Register
#define ICCEOIR_OFFSET 0x00000110 		// End Of Interrupt Register
#define ICDDCR_OFFSET 0x00001000		// Distributor Control Register
#define ICDICTR_OFFSET 0x00001004		// Interrupt Controller Type Register
#define ICDIIDR_OFFSET 0x00001008		// Distributor Implementer Identification register
//Interrupt configuration registers // default values for ICDICFRs
#define ICDICFR_BASE_OFFSET 0x00001C00 		// Distributor interrupt sensitivity base address[0:5]
#define ICDIPR_BASE_OFFSET 0x00001400 		// Distributor interrupt priority register base address[0:23]
#define ICDIPTR_BASE_OFFSET 0x00001800 		// Distributor interrupt target CPU core register base address[0:23]
#define ICDISER_BASE_OFFSET 0x00001100 		// Distributor interrupt enable register base address [0:2]


//typedefs and enums

//function prototypes

void readGICReg(RUINT32 *dataHolder, RUINT32 offset);
void writeGICReg(RUINT32 data, RUINT32 offset);
void InitializeIRQ(void);
void InitDistributor(void);
void InitCPUInterface(void);
void GICInterruptHandler(void);
void setInterruptHandler(void);
void DistributorEnableInterrupt(RUINT32 IntId);





/*general info :
 * distributor -> sends and signals CPU regarding interrupt
 * 	-> receives the interrupt signals
 * 	-> forwarding interrupt signals to CPU GIC controller
 * 	-> enabling / disabling interrupts
 * 	-> setting priorities to interrupts
 * 	-> setting target processor of the interrupts (which interrupt signal will be feed into which CPU)
 * 	-> setting interrupt level sensitivity or edge triggered (sensitivity) option
 * CPU interface -> acks interrupts and distributor
 * 	-> enabling signalling of interrupt requests by CPU
 * 	-> acknowledging interrupts
 * 	-> indicating compilation of processing of an interrupt
 * GIC controller*/

/*procedure :
 * initialize distributor
 * initalize CPU interface
 * initialize GIC instance
 * initialize and start GIC
 * initialize IRQ interrupts
 * */

/*after reset or Power on, Distributor and CPU interface controller is disabled.
 * It is the responsiblity of the software to initialize*/





/* Operation - 3
 * write to ICDDCR register to enable distributor (bit 0 shall be set to '1')
 * */

void readGICReg(RUINT32 *dataHolder, RUINT32 offset)
{
	RUINT32 fullReadAddr = MPCORE_ADDRESS + offset;
	*dataHolder = *(RUINT32 *)fullReadAddr;
}

void writeGICReg(RUINT32 data, RUINT32 offset)
{
	RUINT32 fullReadAddr = MPCORE_ADDRESS + offset;
	*(RUINT32 *)fullReadAddr = data;
}

void setICDICFRS(RUINT32 ID)
{

}

void DistributorEnableInterrupt(RUINT32 IntId)
{
	const RUINT32 cu4TotalIntNum = 96U;
	RUINT32 u4ModBase = 32U;
	RUINT32 u4TempRegisterOffset = 0;
	RUINT32 u4TempBitOffset = 0;
	RUINT32 u4TempReadRegister = 0;
	RUINT32 u4TempBitSetter = 1U;

	/*each ICDISER register is of size 32 bit
	 * ICDISER0 -> 0:31
	 * ICDISER1 -> 32:63
	 * ICDISER2 -> 64:95
	 * */

	u4TempRegisterBitOffset = IntId % cu4TotalIntNum;
	u4TempRegisterOffset = ((IntId - u4TempRegisterBitOffset) / u4ModBase) - 1U;

	readGICReg(&u4TempReadRegister, ICDISEROffset(u4TempRegisterOffset));

	u4TempBitSetter <<= u4TempRegisterBitOffset;

	u4TempReadRegister |= u4TempBitSetter;

	writeGICReg(u4TempReadRegister, ICDISEROffset(u4TempRegisterOffset));

}

void InitDistributor()
{
	/* Operation - 1
	 * ICD - Distributor initialization operations
	 * specify each interrupts sensitivity (level sensitive vs edge triggered) from ICDICFRs registers
	 * set ICDIPRs to specify each interrupts priority value
	 * set which interrupt signal will be feed into which CPU (in case of multi processor such as zynq-7010)
	 * using ICDIPTRs -> target processor list for each interrupt
	 * write ICDISERs to enable interrupts (interrupt set enable registers)
	 * */

	/*
	 * ICDICFR0 -> Software generated interrupts(SGI) specific, this driver use case is for peripheral generated interrupts only
	 * ICDICFR1 -> CPU Private Peripheral Interrupts (PPI)
	 * ICDICFR2 -> Shared peripheral Interrupts (SPI) -> IRQ # [32:47] -> reset value -> 0x55555555 -> all 01 (high - level active)
	 * ICDICFR3 -> Shared peripheral Interrupts (SPI) -> IRQ # [48:63] -> reset value -> 0x55555555 -> all 01 (high - level active)
	 * ICDICFR4 -> Shared peripheral Interrupts (SPI) -> IRQ # [64:79] -> reset value -> 0x55555555 -> all 01 (high - level active)
	 * */

	RUINT32 u4Index = 0;
	// set ICDICFR2, 3 and 4 to rising edge (0xFFFFFFFF - not sure if this is true)
	writeGICReg(0xFFFFFFFF, ICDFROffset(2));
	writeGICReg(0xFFFFFFFF, ICDFROffset(3));
	writeGICReg(0xFFFFFFFF, ICDFROffset(4));

	// set interrupt priority - to the lowest priority and all equal
	// set 0x0 to all priority levels
	for(; u4Index<24; u4Index++){
		writeGICReg(0x00000000, ICDIPROffset(u4Index));
	}
	//set all interrupts to be targeted for CPU core 0 for this use case
	for(u4Index = 0; u4Index<24; u4Index++){
		writeGICReg(0x00000000, ICDIPTROffset(u4Index));
	}

	//enable interrupts, to enable write 1 to specific bit
	DistributorEnableInterrupt(82); // use case - 82 is uart1 interrupt

}

